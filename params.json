{
  "name": "P5js sound examples",
  "tagline": "some examples  combining p5.js and p5.sound",
  "body": "# p5.js sound examples with p5.sound\r\n_______________________________________________________\r\n\r\nThis repo hosts example of code using p5.js and it's sound library p5.sound :\r\n- http://p5js.org/\r\n- http://p5js.org/reference/#/libraries/p5.sound\r\n\r\nI also use dat.gui.js for the guis :\r\n- http://workshop.chromeexperiments.com/examples/gui/#1--Basic-Usage \r\n- https://code.google.com/p/dat-gui/\r\n\r\nThree examples right now :\r\n\r\n##### Table of Contents  \r\n[Springs](#springs)  \r\n[Flock](#flock)  \r\n[Sid Lee sonification](#sidlee)\r\n\r\n________________________________________________________________________________________________\r\n<a name=\"springs\"/>\r\n## Springs \r\n________________________________________________________________________________________________\r\nhttp://b2renger.github.io/pages_p5js/springs/index.html\r\n\r\nThis example is the sonification of a spring system simulation. \r\n\r\n### spring class to a row of springs\r\nFirst we will take a look at the spring class *c_spring.js*, it's adapted from this code :\r\n\r\nhttp://processingjs.org/learning/topic/springs/\r\n\r\nto fit the p5.js style. We have also blocked the movement on the X axis, commenting line 38 to 43.\r\n\r\nSo we now want to create a line of 8 springs :\r\n```javascript\r\nvar springs = [];\r\n\r\nfunction setup() {\r\n\r\n  createCanvas(windowWidth, windowHeight);\r\n\r\n  for (var i=0; i<8; i++) {\r\n  \ts1 = new Spring( 50+ windowWidth*i/8, windowHeight/2,  20, 0.98, 1.0); // create the spring\r\n    springs.push(s1); // put it in the springs array.\r\n  }\r\n}\r\n\r\nfunction draw() {\r\n\r\n  background(0);\r\n  fill(255);\r\n  \r\n  for (var i=0; i<springs.length; i++) {\r\n    springs[i].update();\r\n    springs[i].display();\r\n  }\r\n}\r\n```\r\n### adding sound\r\nWe will implement our audio engine, object oriented style, so each of our spring will have the same sound. We just want to do some basic amplitude modulation. So we need to create an oscillator and control it's volume with the displacement of each spring.\r\n\r\nWe will agregate this method for our spring class. We simply create a new OScillator, declare a variable to hold its frequency, and start it :\r\n\r\n```javascript\r\nSpring.prototype.audio = function(){\r\n  this.osc = new p5.SinOsc(); // create a new oscillator\r\n\r\n  this.freq = midiToFreq(60); // create a variable to hold freq\r\n  this.osc.freq(this.freq); // apply freq\r\n  this.osc.start(); // start the oscillator\r\n}\r\n```\r\nSince we are at it we can also create a new method to set the frequency :\r\n```javascript\r\nSpring.prototype.set_note = function(f){\r\n  this.freq = midiToFreq(f);\r\n  this.osc.freq(this.freq);\r\n}\r\n```\r\nNow we want to create a new method to control the volume of our oscillator. We want to calculate the distance beetween the actual position of the spring and its rest position, then map this distance to a usefull range for controlling audio signal, and apply it :\r\n```javascript\r\nSpring.prototype.audio_update = function(){\r\n  var newamp = constrain(map(abs(this.positionY - this.tempPosY),0,height/2,0,1),0,0.15);\r\n  this.osc.amp(newamp,0.025,0);\r\n}\r\n```\r\nNote the use of map() and constrain() to be sure the value stays in a given intervall.\r\nWhen we apply the new amplitude, we want to use a second parameter to smoothen the changes in the audio level and avoid clicks.\r\n\r\nNow in the setup we just need to init sound \r\n```javascript\r\nfor (var i=0; i<8; i++) {\r\n  \ts1 = new Spring( 50+ windowWidth*i/8, windowHeight/2,  20, 0.98, 1.0);\r\n  \ts1.audio(); // audio constructor\r\n  \ts1.set_note(60 + i); // set different frequencies\r\n    springs.push(s1);\r\n}\r\n```\r\nAnd in the draw to update sound :\r\n\r\n```javascript\r\nfor (var i=0; i<springs.length; i++) {\r\n    springs[i].update();\r\n    springs[i].audio_update(); // call audio update\r\n    springs[i].display();\r\n}\r\n```\r\n\r\n### Using dat.gui\r\nWe gave a link to a dat.gui workshop at the top of the page.\r\nhttp://workshop.chromeexperiments.com/examples/gui/#1--Basic-Usage \r\n\r\nTo sum-up : we create to data-structure to hold our parameters\r\n- one for the frequency of our oscillators :\r\n```javascript\r\nvar scaleParameters = function() {\r\n  this.Spring_0 = 60;\r\n  this.Spring_1 = 62;\r\n  this.Spring_2 = 63;\r\n  this.Spring_3 = 65;\r\n  this.Spring_4 = 67;\r\n  this.Spring_5 = 68;\r\n  this.Spring_6 = 70;\r\n  this.Spring_7 = 72; \r\n}\r\n```\r\n- one for our simulation parameters :\r\n```javascript\r\nvar simulationParameters = function(){\r\n  this.Mass = 1 ;\r\n  this.Damping = 0.90 ;\r\n  this.K = 0.2;\r\n}\r\n```\r\nAnd we init the gui with two seperate folders four our sets of parameters :\r\n```javascript\r\nvar initGui = function() {\r\n  var f2 = gui.addFolder('Simulation parameters');\r\n  f2.add(sim, 'Mass',1,50);\r\n  f2.add(sim, 'Damping',0,1);\r\n  f2.add(sim, 'K',0,1);  \r\n\r\n  var f1 = gui.addFolder('Tuning (Midi notes)');\r\n  f1.add(scale, 'Spring_0',0,127).listen();\r\n  f1.add(scale, 'Spring_1',0,127).listen();\r\n  f1.add(scale, 'Spring_2',0,127).listen();\r\n  f1.add(scale, 'Spring_3',0,127).listen();\r\n  f1.add(scale, 'Spring_4',0,127).listen();\r\n  f1.add(scale, 'Spring_5',0,127).listen();\r\n  f1.add(scale, 'Spring_6',0,127).listen();\r\n  f1.add(scale, 'Spring_7',0,127).listen();\r\n}\r\n```\r\nNow we write the code to update our object to their new parameters :\r\n- first the simulation parameters we just have to add the following code to the for loop that handles our springs.\r\n```javascript\r\nsprings[i].set_mass(sim.Mass);\r\nsprings[i].set_damping(sim.Damping);\r\nsprings[i].set_k(sim.K);\r\n```\r\n- then a conveniency function to change the frequencies :\r\n```javascript\r\nfunction change_note(){\r\n springs[0].set_note(scale.Spring_0);\r\n springs[1].set_note(scale.Spring_1);\r\n springs[2].set_note(scale.Spring_2);\r\n springs[3].set_note(scale.Spring_3);\r\n springs[4].set_note(scale.Spring_4);\r\n springs[5].set_note(scale.Spring_5);\r\n springs[6].set_note(scale.Spring_6);\r\n springs[7].set_note(scale.Spring_7);\r\n}\r\n```\r\nDon't forget to call it in the draw() loop and you also need to declare and init all those new objects in the setup():\r\n```javascript()\r\n  scale = new scaleParameters();\r\n  sim =  new simulationParameters();\r\n  gui = new dat.GUI();\r\n  initGui();\r\n```\r\n\r\n### Musical Scales\r\nNow we want to have several scales to tune our system. We use array to store several scales which are by the way just series of intervalls. If you look up the internet you should find these pretty fast.\r\n\r\n```javascript\r\nvar major_scale = [0,2,3,5,7,8,10,12];\r\nvar minor_scale = [0, 1, 4, 5, 7, 8, 11, 12];\r\nvar lydian_dominant = [0, 2, 4, 6, 7, 9, 10, 12];\r\nvar harmonic_minor = [0, 2, 3, 5, 7, 8, 11, 12];\r\nvar chromatic_blues = [0, 2, 3, 4, 5, 6, 7, 9];\r\nvar pentatonic = [0, 2, 4, 7, 9, 12, 14, 16];\r\nvar pentatonic_blues = [0, 2, 3, 4, 7, 8, 9, 12];\r\nvar whole_tones = [0, 2, 4, 6, 8, 10, 12, 14];\r\nvar diminished = [0, 2, 3, 5, 6, 8, 9, 11];\r\n```\r\n____________________________________________________________________________________________________\r\n\r\n<a name=\"flock\"/>\r\n## Flock\r\n____________________________________________________________________________________________________\r\n\r\nFlock : http://b2renger.github.io/pages_p5js/flock/index.html\r\n\r\nFor this example we will try to sonify one of the flocking algorithm of Daniel Shiffman :\r\nhttp://p5js.org/learn/examples/Simulate_Flocking.php\r\n\r\nWe will use the same approach as preivously, we will implement an object oriented audio engine and each particle will have its own sound. We will also build a gui with dat.gui.\r\n\r\nWe will work within the boid class first :\r\n\r\nWe need to proptotype our sound engine : what we want is to prototype a cheap helicopter sound using sound synthesis. When you think about it a helicopter sound wise is nothing more than white noise with amplitude modulation. So if you read the Spring example earlier it's nothing new.\r\n\r\n```javascript\r\nBoid.prototype.boid_sound_engine = function(){\r\n  // a noise source to be modulated\r\n  // we will use the pan function of noise to place our object in a stereo field\r\n  this.noise = new p5.Noise();\r\n  this.noise.disconnect();\r\n  this.noise.amp(0.05,2);\r\n  this.noise.start();\r\n\r\n  // an osc to modulate the noise\r\n  // we will be able to adjust the frequency according to the speed of each object\r\n  this.osc = new p5.Oscillator('sine');\r\n  this.osc.disconnect();\r\n  this.osc.amp(1,2,0);\r\n  this.osc.freq(random(5,15));\r\n  this.osc.start();\r\n\r\n  // let's do the modulation !\r\n  this.noise.amp(this.osc,5,5);\r\n}\r\n\r\n```\r\n\r\nthe frequency given to the oscillator will enable us to give an impression of speed : a small number will be perceived as slow, whether a big as fast. We will use this later on, as we have the speed of each boid in that flocking algorithm and of course we will map it to our sound.\r\n\r\nNow we have to think about what parameters we want to be able to hear : for instance we need to place a listener and we will need to know what is the relative position of each boid to . If you listen to a bunch of cars passing next to you, they will move in your auditory field passing from left to right, from close to far, sometimes slowly and sometimes very fast. If a car is behind you the noise you perceive won't be the same as if you face it.\r\n\r\nSo having thought a bit about it we want to be able to make some crude spatialisation for our sounds (left, right, in front of you, behind), we will also want to have some kind of doppler effect :\r\n\r\nhttp://en.wikipedia.org/wiki/Doppler_effect\r\n\r\nFor the spatialisation we will use the pan() method in the next part, for the doppler effect and the mask effect of your head we will use filters and bandpass for doppler et and a low pass for masking :\r\n\r\n```javascript\r\n  // now we need a filter, we will adjust it's parameters according to our simulation\r\n  // cutoff, and quality for a simulation of a doppler effect\r\n  this.filter = new p5.BandPass();\r\n  this.filter.disconnect();\r\n  this.filter.set(500,2);\r\n  \r\n  // connect our noise to our filter\r\n  this.noise.connect(this.filter);\r\n\r\n  // we will need another low pass filter :for the head \r\n  this.lp = new p5.LowPass();\r\n  this.lp.freq(2000);\r\n\r\n  this.filter.connect(this.lp);\r\n\r\n```\r\n\r\nwe also want to add a few helper functions to set things:\r\n```javascript\r\nBoid.prototype.s_setGain = function(value){\r\n    this.filter.amp(value);\r\n}\r\n\r\nBoid.prototype.s_doppler = function(value){\r\n    this.filter.set(value,2);\r\n}\r\n\r\nBoid.prototype.s_pan = function(value){\r\n  this.noise.pan(value);\r\n}\r\n\r\nBoid.prototype.s_lp = function(value){\r\n    this.lp.freq(value);\r\n}\r\n\r\n```\r\n\r\nFirst the speed, because it's easy enough. The veocity of each boid is stored in a variable *this.velocity* so we can calculate its magnitude with the .mag() method. So we basically just have to map it !\r\n\r\n```javascript\r\nBoid.prototype.s_adjustSpeed = function(){\r\n    this.osc.freq(map(this.velocity.mag(),0.5,5,5,10));\r\n}\r\n```\r\nNow we need to compute all our parameters taking into account the position of the listener and the position of the boid. Our listener will be the mouse postion facing up-screen. We will use a variable for the audibility threshold *sp.treshold* (it's part of our gui so it's part of a data strucure share by our programm and dat.GUI, sp stands for simulation parameters in the setup). If a boid is nearer than this treshold then we need to compute it's paramters, else its volume is null.\r\n\r\n```javascript\r\nFlock.prototype.update_audio = function(){\r\n  // take the distance beetween mouse and every object, and adjust amp, filter (doppler effect) and pan\r\n  // we will also take into account the mask effect created by the head with a low pass filter\r\n  for (var i = 0; i < this.boids.length; i++) {\r\n    var distance = dist(mouseX,mouseY,this.boids[i].position.x, this.boids[i].position.y);\r\n\r\n    if (distance < sp.threshold){\r\n      // first we draw a line for each boid we should hear\r\n      stroke(0);\r\n      line(mouseX,mouseY,this.boids[i].position.x, this.boids[i].position.y);\r\n\r\n      // set global volume according to distance\r\n      this.boids[i].s_setGain(map(distance,0,250,1,0));\r\n      // same for the frequency of the filter to simulate doppler effect\r\n      this.boids[i].s_doppler(map(distance,0,250,1000,500));\r\n\r\n      // now we need to calculate an angle to deal with the panoramic\r\n      var mouse = createVector(mouseX,mouseY);\r\n      var temp = mouse.sub(this.boids[i].position);\r\n      var angle = temp.heading();\r\n      var pan_value = map(abs(angle),0,PI,-1,1); // we don't care if the boid is in front or behind we will do it later\r\n      this.boids[i].s_pan(pan_value);\r\n\r\n      // deal with the masking effect of our head adjusting a low pass\r\n      var mask = 0;\r\n       if (angle<0){\r\n        mask = 1000;\r\n       }\r\n       else{\r\n        mask = 2500;\r\n       }\r\n       this.boids[i].s_lp(mask);\r\n       this.boids[i].lp.res((250-distance)/200); // resonance gets stronger when closer !\r\n\r\n      // adjust the frequency of the noise modulation to the actual object speed \r\n      this.boids[i].s_adjustSpeed();\r\n    }\r\n    else{\r\n      this.boids[i].s_setGain(0); // just to be sure ...\r\n    }\r\n   \r\n  }\r\n\r\n}\r\n```\r\n\r\n_____________________________________________________________________________________________________\r\n<a name=\"sidlee\"/>\r\n## Sid Lee\r\n_____________________________________________________________________________________________________\r\nSid_lee_sonification : http://b2renger.github.io/pages_p5js/sidlee-sonification/index.html\r\n\r\nThis example will use socket.io to connect to a live API delivering sensor data about Sid Lee's office in Paris.\r\n\r\nSo you should hear it along this visual : https://sidlee.herokuapp.com/\r\n\r\nAnd here's the api I used : https://github.com/SidLeeParis/sidLeeAgenceConnectee\r\nand also a js fiddle from Xavier (the guy behind all the arduino stuff and the node server - https://github.com/xseignard) to understand how to use the code : http://jsfiddle.net/07acad0b/4/\r\n\r\nI need also to give credit to the samples as many sounds come from freesound.org. Thank you to : robinhood76, noisecollector, maj061785, localtalkradio, kyodon, toiletrolltube, mrauralization, ashleyxxpiano, jackjames-tomknevitt, timbre, rivernile7, stevious42.\r\n\r\n### Get the data\r\n\r\nFirst notice the two new js files : *sidlee-client.js* and *socket.io.js* those are used in js fiddle above to be able to connect to the api and get some data. So we declare and init a client, that will fire up the *update_values* function at the bottom of the code.\r\n\r\n```javascript\r\nvar client = new SidLeeClient('https://sidlee.herokuapp.com/', update_values);\r\n```\r\n\r\nThis *update_values* function is a parser of event, the client will pass data formated in JSON to our function. Each JSON packet as a field named **._id** we will use it to build an if statement to play sounds, adjust parameters etc.\r\n\r\n```javascript\r\nfunction update_values(data){\r\n  var datas = JSON.stringify(data);\r\n  datas = JSON.parse(datas);\r\n  \r\n  var eventID = datas._id; // the id\r\n  var eventDate = datas.date; // we can get the date\r\n  var eventValue = datas.value; // the value\r\n  var eventUnit = datas.unit; //and the unit of the value\r\n\r\n  if (eventID == 'sound'){\r\n    // do something if the event caught is identifyied as the sound sensor  \r\n  }\r\n}\r\n```\r\n\r\nEarlier I said 'each', but in fact one event has no id : it's about the ctrl+z event produce by the several apps people from sid lee are using. Here's the format of the object passed.\r\n\r\n```\r\nObject {date: \"2015-02-18T16:44:08.562Z\", value: 1, unit: \"u\", app: \"InDesign\", user: \"Antoine\"…}\r\n```\r\nSo to catch it we just assume that if a JSON object passed has no *_id* field it's a 'ctrl+z' event.\r\n\r\n\r\n### making sound\r\n\r\nWe have a lot of data : fridge door opening, opening of the main door, water stirred from the water dispenser etc. all those event are ponctual they happen once and won't happen again before a certain amount of time. We can use samples for those, when an event is caught the corresponding sound is played !\r\n\r\nFirst we need to preload the samples, it's best :\r\n\r\n```javascript\r\nvar fridgeSound;\r\n\r\nfunction preload(){\r\n  soundFormats('ogg'); \r\n  fridgeSound = loadSound('sounds/118435__localtalkradio__fridgeopen_sel.ogg');\r\n}\r\n```\r\n\r\n```javascript\r\nfunction update_values(data){\r\n   \r\n  var datas = JSON.stringify(data);\r\n  datas = JSON.parse(datas);\r\n\r\n  if (data._id == 'fridge'){\r\n    fridgeSound.play();\r\n  }\r\n```\r\n\r\nBut that not all, we also get sensor data about ambient sound level in the office, electric consumption of the whole office, and ambient light level. For the sound level and the electric consumption we will use samples played in loop mode, and we will add a filter which frequency will be mapped to the light level.\r\n\r\n```javascript\r\nvar officeSound;\r\nvar electricSound;\r\nvar filter;\r\n\r\nvar lightValue;\r\nvar officeValue;\r\nvar wattValue;\r\n\r\nfunction preload(){\r\n  soundFormats('ogg'); \r\n  officeSound = loadSound('sounds/259632__stevious42__office-background-1.ogg');\r\n  electricSound = loadSound('sounds/187931__mrauralization__electric-humming-sound.wav');\r\n}\r\n```\r\n\r\nIn the setup() function, we create and connect our filter :\r\n\r\n```javascript\r\n  filter = new p5.BandPass();\r\n  officeSound.disconnect();\r\n  officeSound.connect(filter);\r\n\r\n  electricSound.disconnect();\r\n  electricSound.connect(filter);\r\n\r\n  officeSound.loop();\r\n  electricSound.loop();\r\n```\r\n\r\nAnd we adjust parameters in the draw()\r\n\r\n```javascript\r\n  var vol = int(map(soundValue,30,80,50,100));\r\n  officeSound.setVolume(vol/100,0.15,0);\r\n\r\n  var volE = constrain(int(map(wattValue,10000,100000,20,100)),20,100);\r\n  electricSound.setVolume(volE/100,0.15,0);\r\n\r\n  var filterFreq = int(map(lightValue,0,40,800,2000));\r\n  filter.freq(filterFreq);\r\n  filter.res(2);\r\n\r\n```\r\n\r\n### the vizualisation\r\n\r\nWell it's all here :\r\n- waveform visualisation : http://p5js.org/learn/examples/Sound_Oscillator_Frequency.php\r\n- spectrum visualisation : http://p5js.org/learn/examples/Sound_Frequency_Spectrum.php\r\n\r\nWe just switch beetween them according to the *lightswitch* data while inverting the colors.\r\n\r\n\r\n\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}